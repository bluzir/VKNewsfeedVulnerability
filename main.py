# -*- coding: utf-8 -*-
import requests
from time import sleep
from datetime import datetime
import time
database = {}


with open("access_token.txt", "r") as myfile:
    token = myfile.read().replace('\n', '')  # http://vk.cc/2VN6UJ

publics = [83038559]  # список пабликов для парсинга
list_id = None  # для списков новостей
current_next_post = None

#Получение своего айди для дальнейшего его исключения из выдачи
def get_my_id():
    url = 'https://api.vk.com/method/users.get'
    request = requests.get(url, params = {'access_token': token})
    decode = request.json()
    try:
        id = decode['response'][0]['uid']
        return id

    except KeyError:
        print ('Невалидный токен')
        exit()

#Получение общего количества постов
def get_posts_total_count():
    count = 0
    for item in publics:
        url = 'https://api.vk.com/method/wall.get'
        request = requests.get(url, params = {
            'access_token': token,
            'v': 5.24,
            'owner_id': "-"+str(item)
        })
        decode = request.json()
        print (decode)
        count += int(decode['response']['count'])
    print(('в задаче %s постов') % (count))
    return count

#Создание списка новостей с нужным пабликом (писал хохол)
def create_work_list(target_id): # ета писал хохол
    global list_id
    print('создаем список')
    url = 'https://api.vk.com/method/newsfeed.saveList'
    par = {'title': 'title', 'source_ids': target_id, 'access_token': token}
    request = requests.get(url, params=par)
    request = request.json()
    if 'response' in request:
        list_id = request['response']
    else:
        if 'error' in request and 'error_code' in request['error'] and request['error']['error_code'] == 1170:
            print('у тебя слишком много списков, для работы нужно удалить хотя бы один. сделай это сам')
        else:
            print('неизвестная ошибка')
            print(request)
        exit()
    print ('Список с id:'+str(list_id)+' создан')
    pass

#Newsfeed_get для списка новостей
def get_post(x):
    url = 'https://api.vk.com/method/newsfeed.get'
    par = {'access_token': token,
           'count': 1,
           'filters': 'post',
           'v': 5.24,
           'start_from': x,
           'source_ids': 'list'+str(list_id) }
    request = requests.get(url, params = par)
    decode = request.json()
    post = decode['response']
    return post

#Проверяем наличие списка с таким именем
def check_list_exists(id):
    try:
        database[id][0]
        return True
    except:
        return False

#Получаем список айди для поста
def get_ids(post, my_id):
    profiles = post['profiles']
    ids = []
    for item in profiles:
        id = item['id']
        if id != my_id:
            id = str(id)
            ids.append(id)
   
    return ids

#Получаем ссылку на пост
def get_link(post):
    content = post['items']
    link = ''
    for item in content:
        source = str(item['source_id'])
        post_id = str(item['post_id'])
        text = item['text']
        date = str(datetime.fromtimestamp(item['date']))
        link = "http://vk.com/wall%s_%s" % (source, post_id)
        print (link)
    return link

#Айди поста получает
def get_id(post):  # так легче читать
    content = post['items']
    post_id = 0
    for item in content:
        post_id = str(item['post_id'])
    return post_id

#И тут вроде как тоже
def get_signer_id(post):
    content = post['items'][0]
    if 'signer_id' in content:
        signer_id = content['signer_id']
    else:
        signer_id = 0
    return signer_id

# получаем параметр next_from для следующего поста
def get_next(post):
    next = post['next_from']
    return next

def add_to_db(link, ids):
    for item in ids:
        if check_list_exists(item) == False:
            database[item] = []
            database[item].append(link)
        else:
            database[item].append(link)

def has_next(post):
    if post['next_from']:
        return True
    else:
        return False

#Удаляем список новостей после парсинга
def delete_work_list():
    global list_id
    url = 'https://api.vk.com/method/newsfeed.deleteList'
    par = {'list_id': list_id, 'access_token': token}
    request = requests.get(url, params=par)
    print('список с id '+str(list_id)+' удалено')
    pass

#Анализируем ДБ
def get_suggestions(dictionary):
    for key in dictionary:
        if len(database[key]) == 4:
            link = database[key][3]
            print ("Предложенный пост:"+key+"|"+link)
        elif len(database[key]) > 7:
            print ("Админастратор: http://vk.com/id"+key)

def get_result():
    global current_next_post
    my_id = get_my_id()
    progress = 0
    total = get_posts_total_count()
    for public_id in publics:
        print ("Начинаем парсинг")
        create_work_list(-public_id)
        start = time.time()  # time start here
        post = get_post(0)
        ids = get_ids(post, my_id)
        link = get_link(post)
        add_to_db(link, ids)
        signer_id = get_signer_id(post)
        nextpost = get_next(post)
        post_count = nextpost[0]
        sleep(1)
        progress += 1
        older = post
        while has_next(post):  # начало нужно для того, чтобы запустить цикл, иначе не получить некст_фром
            older = post
            post = get_post(nextpost)
            ids = get_ids(post, my_id)
            link = get_link(post)
            add_to_db(link, ids)
            signer_id = get_signer_id(post)
            nextpost = get_next(post)
            sleep(1)
    print ("Парсинг окончен")

    get_suggestions(database)
    delete_work_list()


try:
    get_result()
except:
    print ("Чото поломалось, гыгыгы")
    delete_work_list()

exit()
